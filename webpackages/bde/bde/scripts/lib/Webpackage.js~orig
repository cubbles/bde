(function (global) {
    'use strict';

    function ArtifactCollection() {

        var apps = [];
        var elementaryComponents = [];
        var compoundComponents = [];
        var utilities = [];

        Object.extend(this, {

            push: function () {
                var arg, args = Array.from(arguments);
                var i = args.length;
                while (arg = args[i--]) {
                    switch (arg.artifactType) {

                        case 'app':
                            this.apps.push(arg);
                        break;

                        case 'elementaryComponent':
                            this.elementaryComponents.push(arg);
                        break;

                        case 'compoundComponent':
                            this.compoundComponents.push(arg);
                        break;

                        case 'utility':
                            this.utilities.push(arg);
                        break;
                    }
                }
            }
        });

    };

    function Artifact () {}

    var App = Object.extend(Artifact, {});

    var ElementaryComponent = Object.extend(Artifact, {});

    var CompoundComponent = Object.extend(Artifact, {});

    var Utility = Object.extend(Artifact, {});

    function Person() {

        var name;
        var email;
        var url;

        Object.defineProperty(this, 'name', {
            __proto__: String.prototype,
            configurable: false,

            get: () => name,

            set: (value) => {
                console.log(this);

                if ('string' !== typeof value) {
                    throw new TypeError("`Webpackage.name` must be a String.");
                }

                if (!value.match(/^((\S+[\-\']?)*(\S+)?[\.]?\s)+(\S+[\-\']?)*(\S+)?$/)) {
                    throw new TypeError("`Webpackage.name` must match `/^((\S+[\-\']?)*(\S+)?[\.]?\s)+(\S+[\-\']?)*(\S+)?$/`.");
                }

                name = value;
            }
        });

        Object.defineProperty(this, 'email', {
            __proto__: String.prototype,
            configurable: false,

            get: () => email,

            set: (value) => {
                console.log(this);

                if ('string' !== typeof value) {
                    throw new TypeError("`Webpackage.email` must be a String.");
                }

                if (!value.match(/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/)) {
                    throw new TypeError("`Webpackage.email` must match `/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/`.");
                }

                email = value;
            }
        });

        Object.defineProperty(this, 'url', {
            __proto__: String.prototype,
            configurable: false,

            get: () => url,

            set: (value) => {
                console.log(this);

                if ('string' !== typeof value) {
                    throw new TypeError("`Webpackage.url` must be a String.");
                }

                if (!value.match(/^(https?):\/\/[^\s\/$.?#].[^\s]*$/)) {
                    throw new TypeError("`Webpackage.url` must match `/^(https?):\/\/[^\s\/$.?#].[^\s]*$/`.");
                }

                url = value;
            }
        });

        return this;
    };

    function Webpackage() {

        var name;
        var groupId;
        var version;
        var modelVersion;
        var description;
        var author = new Person;
        var contributors;
        var license;
        var homepage;
        var keywords;
        var man;
        var runnables = [];
        var artifacts = new ArtifactCollection;

        Object.defineProperty(this, 'name', {
            __proto__: String.prototype,
            configurable: false,

            get: () => name,

            set: (value) => {
                console.log(this);

                if ('string' !== typeof value) {
                    throw new TypeError("`Webpackage.name` must be a String.");
                }

                if (!value.match(/^([a-z][a-z0-9]*)([a-z\-]*(([0-9])+([0-9\.]+)*([0-9])+)*)*([a-z0-9]*)$/)) {
                    throw new TypeError("`Webpackage.name` must match `/^([a-z][a-z0-9]*)([a-z\-]*(([0-9])+([0-9\.]+)*([0-9])+)*)*([a-z0-9]*)$/`.");
                }

                name = value;
            }
        });

        Object.defineProperty(this, 'groupId', {
            __proto__: String.prototype,
            configurable: false,

            get: () => groupId,

            set: (value) => {
                if ('string' !== typeof value) {
                    throw new TypeError("`Webpackage.groupId` must be a String.");
                }

                if (!value.match(/^([a-z0-9]+||([a-z0-9]+[a-z0-9-][a-z0-9]+)*)(\.([a-z0-9]+||([a-z0-9]+[a-z0-9-][a-z0-9]+)*))*$/)) {
                    throw new TypeError("`Webpackage.groupId` must match `/^([a-z0-9]+||([a-z0-9]+[a-z0-9-][a-z0-9]+)*)(\.([a-z0-9]+||([a-z0-9]+[a-z0-9-][a-z0-9]+)*))*$/`.");
                }

                groupId = value;
            }
        });

        Object.defineProperty(this, 'version', {
            __proto__: String.prototype,
            configurable: false,

            get: () => version,

            set: (value) => {
                if ('string' !== typeof value) {
                    throw new TypeError("`Webpackage.version` must be a String.");
                }

                if (!value.match(/^(\d+)(\.[\d]+)*(-SNAPSHOT)?$/)) {
                    throw new TypeError("`Webpackage.version` must match `/^(\d+)(\.[\d]+)*(-SNAPSHOT)?$/`.");
                }

                version = value;
            }
        });

        Object.defineProperty(this, 'modelVersion', {
            __proto__: String.prototype,
            configurable: false,

            get: () => modelVersion,

            set: (value) => {
                if ('string' !== typeof value) {
                    throw new TypeError("`Webpackage.modelVersion` must be a String.");
                }

                if (!value.match(/^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/)) {
                    throw new TypeError("`Webpackage.modelVersion` must match `/^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/`.");
                }

                modelVersion = value;
            }
        });

        // Chrome seems to ignore `writeable = false`, so we monkeypatch it
        Object.defineProperty(this, 'docType', {
            __proto__: String.prototype,
            get: () => 'webpackage',
            set: () => {throw new TypeError("Cannot assign to read only property 'docType' of " + this.prototype.name)}
        });

        Object.defineProperty(this, 'contributors', {
            __proto__: Array.prototype,
            configurable: false,

            get: () => contributors,

            push: () => {
                if (!Array.from(arguments).every(e => e instanceof Person)) {
                    throw new TypeError("Can only assign objects instanceof Person ")
                }
            }
        });

        Object.defineProperty(this, 'description', {
            __proto__: String.prototype,
            configurable: false,

            get: () => description,

            set: (value) => {
                if ('string' !== typeof value) {
                    throw new TypeError("`Webpackage.description` must be a String.");
                }

                description = value;
            }
        });

        Object.defineProperty(this, 'license', {
            __proto__: String.prototype,
            configurable: false,

            get: () => license,

            set: (value) => {
                if ('string' !== typeof value) {
                    throw new TypeError("`Webpackage.license` must be a String.");
                }

                license = value;
            }
        });

        Object.defineProperty(this, 'homepage', {
            __proto__: String.prototype,
            configurable: false,

            get: () => homepage,

            set: (value) => {
                if ('string' !== typeof value) {
                    throw new TypeError("`Webpackage.homepage` must be a String.");
                }

                if (!value.match(/^(https?):\/\/[^\s\/$.?#].[^\s]*$/)) {
                    throw new TypeError("`Webpackage.homepage` must match `/^(https?):\/\/[^\s\/$.?#].[^\s]*$/`.");
                }

                homepage = value;
            }
        });

        Object.defineProperty(this, 'man', {
            __proto__: String.prototype,
            configurable: false,

            get: () => man,

            set: (value) => {
                if ('string' !== typeof value) {
                    throw new TypeError("`Webpackage.man` must be a String.");
                }

                if (!value.match(/^(https?):\/\/[^\s\/$.?#].[^\s]*$/)) {
                    throw new TypeError("`Webpackage.man` must match `/^(https?):\/\/[^\s\/$.?#].[^\s]*$/`.");
                }

                man = value;
            }
        });

        // Methods
        this.complete = function() {
            return !!(this.name && this.groupId && this.version && this.modelVersion && this.docType);
        };

        this.toString = function() {
            var out = {}, props = Object.getOwnPropertyNames(this);
            props.filter(p => typeof p !== 'function').forEach(p => out[p] = this[p]);

            return JSON.stringify(out);
        };

    };

    var expose = global;

    expose.Webpackage = Webpackage;

}(typeof global !== 'undefined' && global && typeof module !== 'undefined' && module ? global : this || window));
